/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ssh;

import java.io.IOException;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.stage.Stage;
import ssh.ClientWrapper;

public class App extends Application {
    public String getGreeting() {
        return "Hello World!";
    }

    private String host = "";
    private String username = "";
    private String command = "";
    private ClientWrapper client;

    public void start(Stage stage) throws IOException {
        Label l = new Label("No output yet");
        StackPane root = new StackPane();
        TilePane tile = new TilePane();
        root.getChildren().add(tile);

        TextField host = new TextField();
        host.setPromptText("Host");

        tile.getChildren().add(host);

        TextField username = new TextField();
        username.setPromptText("Username");
        tile.getChildren().add(username);
        TextField command = new TextField();
        command.setPromptText("Command");
        tile.getChildren().add(command);
        command.setVisible(false);

        Button button = new Button("Connect");
        Button run = new Button("Connect");
        EventHandler<ActionEvent> runevent = new EventHandler<ActionEvent>() {
            public void handle(ActionEvent e) {
                try {
                    String result = client.runCommand(command.getText());
                    l.setText(result);
                } catch (IOException ex) {
                    if (ex.toString().contains("Command")) {
                        l.setText("Failed to run command");
                    }
                    System.out.println("Failed to run command" + ex);
                }

            }
        };
        run.setOnAction(runevent);

        run.setVisible(false);
        tile.getChildren().add(run);

        EventHandler<ActionEvent> event = new EventHandler<ActionEvent>() {
            public void handle(ActionEvent e) {
                try {
                    client = new ClientWrapper(host.getText(), username.getText());
                    username.setVisible(false);
                    host.setVisible(false);
                    button.setVisible(false);
                    command.setVisible(true);
                    run.setVisible(true);
                } catch (IOException ex) {
                    if (ex.toString().contains("Host")) {
                        l.setText("Failed to connect to host");
                    } else if (ex.getMessage().contains("auth")) {
                        l.setText("Failed to authenticate");
                    } 
                    System.out.println("Failed to connect" + ex.toString());
                }

            }
        };

        button.setOnAction(event);
        tile.getChildren().add(button);

        root.getChildren().add(l);

        Scene scene = new Scene(root, 640, 480);
        stage.setScene(scene);
        stage.show();
        System.out.println(new App().getGreeting());

    }

    public static void main(String[] args) throws IOException {
        launch();

    }
}
